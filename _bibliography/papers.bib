---
---

@string{aps = {American Physical Society,}}

@inproceedings{adnan2022hotembeddings,
  abbr = {VLDB},
  bibtex_show = {true},
  title = {High-Performance Training by Exploiting Hot-Embeddings in Recommendation Systems},
  author = {Adnan, Muhammad and Maboud, Yassaman and Mahajan, Divya and Nair, Prashant J.},
  booktitle = {Proceedings of the 48th International Conference on Very Large Data Bases (VLDB)},
  doi = {10.14778/3485450.3485462},
  abstract = {Recommender models are commonly used to suggest relevant items to a user for e-commerce and online advertisement-based applications. These models use massive embedding tables to store numerical representation of items' and users' categorical variables (memory intensive) and employ neural networks (compute intensive) to generate final recommendations. Training these large-scale recommendation models is evolving to require increasing data and compute resources. The highly parallel neural networks portion of these models can benefit from GPU acceleration however, large embedding tables often cannot fit in the limited-capacity GPU device memory. Hence, this paper deep dives into the semantics of training data and obtains insights about the feature access, transfer, and usage patterns of these models. We observe that, due to the popularity of certain inputs, the accesses to the embeddings are highly skewed with a few embedding entries being accessed up to 10000X more. This paper leverages this asymmetrical access pattern to offer a framework, called FAE, and proposes a hot-embedding aware data layout for training recommender models. This layout utilizes the scarce GPU memory for storing the highly accessed embeddings, thus reduces the data transfers from CPU to GPU. At the same time, FAE engages the GPU to accelerate the executions of these hot embedding entries. Experiments on production-scale recommendation models with real datasets show that FAE reduces the overall training time by 2.3X and 1.52X in comparison to XDL CPU-only and XDL CPU-GPU execution while maintaining baseline accuracy.},
  issn = {2150-8097},
  url = {https://dl.acm.org/doi/10.14778/3485450.3485462},
  html = {https://vldb.org/pvldb/vol15/p127-mahajan.pdf},
  pdf = {FAE.pdf},
  year = {2021},
  issue_date = {September 2021},
  publisher = {VLDB Endowment},
  journal = {Proc. VLDB Endow.},
  volume = {15},
  number = {1},
  code = {https://github.com/STAR-Laboratory/Accelerating-RecSys-Training},
  selected = {true}
}

@misc{adnan2022heterogeneous,
  abbr = {arXiv},
  bibtex_show = {true},
  title={Heterogeneous Acceleration Pipeline for Recommendation System Training}, 
  author={Muhammad Adnan and Yassaman Ebrahimzadeh Maboud and Divya Mahajan and Prashant J. Nair},
  year={2022},
  eprint={2204.05436},
  archivePrefix={arXiv},
  primaryClass={cs.AR},
  abstract = {Recommendation systems are unique as they show a conflation of compute and memory intensity due to their deep learning and massive embedding tables. Training these models typically involve a hybrid CPU-GPU mode, where GPUs accelerate the deep learning portion and the CPUs store and process the memory-intensive embedding tables. The hybrid mode incurs a substantial CPU-to-GPU transfer time and relies on main memory bandwidth to feed embeddings to GPU for deep learning acceleration. Alternatively, we can store the entire embeddings across GPUs to avoid the transfer time and utilize the GPU's High Bandwidth Memory (HBM). This approach requires GPU-to-GPU backend communication and scales the number of GPUs with the size of the embedding tables. To overcome these concerns, this paper offers a heterogeneous acceleration pipeline, called Hotline.
  Hotline leverages the insight that only a small number of embedding entries are accessed frequently, and can easily fit in a single GPU's HBM. Hotline implements a data-aware and model-aware scheduling pipeline that utilizes the (1) CPU main memory for not-frequently-accessed embeddings and (2) GPUs' local memory for frequently-accessed embeddings. Hotline improves the training throughput by dynamically stitching the execution of popular and not-popular inputs through a novel hardware accelerator and feeding to the GPUs. Results on real-world datasets and recommender models show that Hotline reduces the average training time by 3x and 1.8x in comparison to Intel-optimized CPU-GPU DLRM and HugeCTR-optimized GPU-only baseline, respectively. Hotline increases the overall training throughput to 35.7 epochs/hour in comparison to 5.3 epochs/hour for the Intel-optimized DLRM baseline.},
  pdf = {Hotline.pdf}
}